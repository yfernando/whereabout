require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe PoisController, :type => :controller do

  before(:each) do
    user = User.create! email: "test1@gmail.com", id: 1, password: 'password'
    @category = user.categories.create! name: 'category 1'
    expect(@request.env["warden"]).to receive(:authenticate!).and_return(user).at_least(:once)
    expect(controller).to receive(:current_user).and_return(user).at_least(:once)
  end

  # This should return the minimal set of attributes required to create a valid
  # Poi. As you add validations to Poi, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { {category_id: @category.id} }

  describe "GET index" do
    it "assigns all pois as @pois" do
      poi = Poi.create! valid_attributes
      get :index, {}
      expect(assigns(:pois)).to eq([poi])
    end
  end

  describe "GET show" do
    it "assigns the requested poi as @poi" do
      poi = Poi.create! valid_attributes
      get :show, {:id => poi.to_param}
      expect(assigns(:poi)).to eq(poi)
    end
  end

  describe "GET new" do
    it "assigns a new poi as @poi" do
      get :new, {}
      expect(assigns(:poi)).to be_a_new(Poi)
    end
  end

  describe "GET edit" do
    it "assigns the requested poi as @poi" do
      poi = Poi.create! valid_attributes
      get :edit, {:id => poi.to_param}
      expect(assigns(:poi)).to eq(poi)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Poi" do
        expect {
          post :create, {:poi => valid_attributes}
        }.to change(Poi, :count).by(1)
      end

      it "assigns a newly created poi as @poi" do
        post :create, {:poi => valid_attributes}
        expect(assigns(:poi)).to be_a(Poi)
        expect(assigns(:poi)).to be_persisted
      end

      it "redirects to the created poi" do
        post :create, {:poi => valid_attributes}
        expect(response).to redirect_to(Poi.last)
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      let(:new_attributes) {
        { name: "new name" }
      }

      it "updates the requested poi" do
        poi = Poi.create! valid_attributes
        put :update, {:id => poi.to_param, :poi => new_attributes}
        poi.reload
        expect(poi.name).to eq "new name"
      end

      it "assigns the requested poi as @poi" do
        poi = Poi.create! valid_attributes
        put :update, {:id => poi.to_param, :poi => valid_attributes}
        expect(assigns(:poi)).to eq(poi)
      end

      it "redirects to the poi" do
        poi = Poi.create! valid_attributes
        put :update, {:id => poi.to_param, :poi => valid_attributes}
        expect(response).to redirect_to(poi)
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested poi" do
      poi = Poi.create! valid_attributes
      expect {
        delete :destroy, {:id => poi.to_param}
      }.to change(Poi, :count).by(-1)
    end

    it "redirects to the pois list" do
      poi = Poi.create! valid_attributes
      delete :destroy, {:id => poi.to_param}
      expect(response).to redirect_to(pois_url)
    end
  end

end
